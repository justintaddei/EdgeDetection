{"version":3,"sources":["src/util/emitter.ts","src/util/file-drop-handler.ts","src/canvas-editor.ts","src/app.ts"],"names":["tslib_1.__extends"],"mappings":"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","file":"app.js","sourcesContent":["export interface Emitter {\r\n  addEventListener(type: string, listener?: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\r\n  dispatchEvent(evt: Event): boolean;\r\n  removeEventListener(type: string, listener?: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\r\n}\r\n\r\n/**\r\n * A simply event emitter class\r\n*/\r\nexport class Emitter {\r\n  constructor() {\r\n    var delegate = document.createDocumentFragment();\r\n    [\r\n      'addEventListener',\r\n      'dispatchEvent',\r\n      'removeEventListener'\r\n    ].forEach(f =>\r\n      this[f] = (...xs) => delegate[f](...xs)\r\n    )\r\n  }\r\n}","import { Emitter } from './emitter';\r\n\r\ninterface FileReadyEvent extends CustomEvent<string> {\r\n  /** The object URL of an image */\r\n  detail: string;\r\n}\r\n\r\ninterface FileDropHandler {\r\n  addEventListener(type: 'file-ready', listener: (event: FileReadyEvent) => any);\r\n}\r\n\r\n/**\r\n * Adds Drag-Drop file upload capability to the given element\r\n*/\r\nclass FileDropHandler extends Emitter {\r\n  /**\r\n   * The last object URL to be created\r\n   * Used to revoke unused object URLs\r\n   */\r\n  private lastObjectURL: string;\r\n\r\n  /**\r\n   * The `HTMLElement`\r\n   */\r\n  private targetElement: HTMLElement;\r\n\r\n  /**\r\n   * Adds Drag-Drop file upload capability to the given element\r\n   * @param element The `HTMLElement`\r\n   */\r\n  constructor(element: HTMLElement) {\r\n    super();\r\n\r\n    this.targetElement = element;\r\n\r\n    // Listen for the `dragover` event\r\n    this.targetElement.addEventListener('dragover', e => {\r\n      // Stop the browser from doing things we don't want it to do\r\n      e.preventDefault();\r\n\r\n      // Add a class to the element to provide visual feedback\r\n      this.targetElement.classList.add('drag-target');\r\n    }, false);\r\n\r\n    // Listen for the `dragleave` event\r\n    this.targetElement.addEventListener('dragleave', () => {\r\n      // Remove the class to the element to provide visual feedback\r\n      this.targetElement.classList.remove('drag-target');\r\n    }, false);\r\n\r\n    // Listen for the `drop` event\r\n    this.targetElement.addEventListener('drop', e => {\r\n      // Stop the browser from doing things we don't want it to do\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n\r\n      // Remove the class to the element to provide visual feedback\r\n      this.targetElement.classList.remove('drag-target');\r\n\r\n      // Make sure we actually have an image\r\n      if (!e.dataTransfer.files[0] || e.dataTransfer.files[0].type.indexOf('image') === -1) {\r\n        console.log(!e.dataTransfer.files[0] ? 'No file to load' : `Uknown file type: ${e.dataTransfer.files[0].type}`);\r\n        return false;\r\n      }\r\n\r\n      // Revoke the last object URL if there is one\r\n      if (this.lastObjectURL)\r\n        URL.revokeObjectURL(this.lastObjectURL);\r\n\r\n      // Create an object URL for the image\r\n      this.lastObjectURL = URL.createObjectURL(e.dataTransfer.files[0]);\r\n\r\n      // Let other code know the image is ready\r\n      const event = new CustomEvent('file-ready', {\r\n        detail: this.lastObjectURL\r\n      });\r\n\r\n      this.dispatchEvent(event);\r\n    }, false);\r\n  }\r\n}\r\n\r\nexport { FileDropHandler };","class CanvasEditor {\r\n  /**\r\n   * The height of the canvas\r\n   */\r\n  height: number;\r\n  /**\r\n   * The width of the canvas\r\n   */\r\n  width: number;\r\n  /**\r\n   * Methods and properties for drawing and manipulating\r\n   * images and graphics on a canvas element in a document.\r\n   * A context object includes information about colors,\r\n   * line widths, fonts, and other graphic parameters\r\n   * that can be drawn on a canvas.\r\n   */\r\n  context: CanvasRenderingContext2D;\r\n  /**\r\n   * The HTMLCanvasElement\r\n   */\r\n  canvasElement: HTMLCanvasElement;\r\n\r\n  /**\r\n   * Returns the value of the pixel at `imageData(x, y)`\r\n   * @param imageData The `ImageData`\r\n   * @param x The x coordinate\r\n   * @param y The y coordinate\r\n   */\r\n  static getPixel(imageData: ImageData, x: number, y: number): number {\r\n    return imageData.data[(imageData.width * 4 * y) + x * 4] || 0;\r\n  }\r\n\r\n  /**\r\n   * Sets the value for the pixel at `imageData(x, y)` to `value`\r\n   * @param imageData The `ImageData`\r\n   * @param x The x coordinate\r\n   * @param y The y coordinate\r\n   * @param value The new value for the pixel\r\n   */\r\n  static setPixel(imageData: ImageData, x: number, y: number, value: number) {\r\n    imageData.data[((imageData.width * 4 * y) + x * 4)] = value;\r\n    imageData.data[((imageData.width * 4 * y) + x * 4) + 1] = value;\r\n    imageData.data[((imageData.width * 4 * y) + x * 4) + 2] = value;\r\n    imageData.data[((imageData.width * 4 * y) + x * 4) + 3] = 255;\r\n  }\r\n\r\n  /**\r\n   * Converts an RGB image to monochrome\r\n   * @param imageData The `ImageData`\r\n   */\r\n  static toMono(imageData: ImageData) {\r\n    for (let i = 0, n = imageData.data.length; i < n; i += 4) {\r\n      const grayscale = imageData.data[i] * 0.3 + imageData.data[i + 1] * 0.59 + imageData.data[i + 2] * 0.11;\r\n      imageData.data[i] = grayscale;  // red\r\n      imageData.data[i + 1] = grayscale;  // green\r\n      imageData.data[i + 2] = grayscale;  // blue\r\n    }\r\n  }\r\n\r\n  constructor(canvasElement: HTMLCanvasElement) {\r\n    this.canvasElement = canvasElement;\r\n\r\n    // Get the `CanvasRenderingContext2D` of `this.canvasElement`\r\n    this.context = this.canvasElement.getContext('2d');\r\n\r\n    // Store the width and height of the canvas\r\n    this.width = this.canvasElement.width;\r\n    this.height = this.canvasElement.height;\r\n  }\r\n\r\n  /**\r\n   * Clears the canvas\r\n  */\r\n  clear() {\r\n    this.context.clearRect(0, 0, this.width, this.height);\r\n  }\r\n\r\n  /**\r\n   * Fills the canvas with the given image\r\n   * @param url An object URL pointing to an image\r\n   */\r\n  fillImage(url: string): Promise<void> {\r\n    return new Promise(resolve => {\r\n      // Create a new image\r\n      const img = new Image();\r\n\r\n      // Wait for the image to load\r\n      img.addEventListener('load', () => {\r\n        // Get the natural width and height of the image\r\n        let width = img.naturalWidth;\r\n        let height = img.naturalHeight;\r\n\r\n        // Resize the image to fit on the canvas\r\n        if (width > height) {\r\n          width = this.width;\r\n          height = this.height * img.naturalHeight / img.naturalWidth;\r\n        } else {\r\n          height = this.height;\r\n          width = this.width * img.naturalWidth / img.naturalHeight;\r\n        }\r\n\r\n        // Draw the image to the canvas\r\n        this.context.drawImage(img, (this.width - width) / 2, (this.height - height) / 2, width, height);\r\n        resolve();\r\n      });\r\n\r\n      // Set the source of the image to the object url\r\n      img.src = url;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns the ImageData of the canvas\r\n  */\r\n  getImageData(): ImageData {\r\n    return this.context.getImageData(0, 0, this.width, this.height);\r\n  }\r\n\r\n  /**\r\n   * Puts the given `ImageData` onto the canvas\r\n   * @param imageData The new `ImageData`\r\n   */\r\n  putImageData(imageData: ImageData) {\r\n    this.context.putImageData(imageData, 0, 0);\r\n  }\r\n\r\n  /**\r\n   * Replaces the canvas data with the given `kernel` applied to the given `ImageData`\r\n   * @param imageData The `ImageData` to apply the `kernel` to\r\n   * @param kernel The kernel to be applied to the canvas\r\n   */\r\n  applyKernel(imageData: ImageData, kernel: number[][]) {\r\n    // Convert the ImageData to monochrome\r\n    CanvasEditor.toMono(imageData);\r\n\r\n    // Create a new ImageData object of the same dimensions\r\n    let newImageData = this.context.createImageData(this.width, this.height);\r\n\r\n    // Loop over every pixel in the image\r\n    for (let x = 0; x < imageData.width; x++) {\r\n      for (let y = 0; y < imageData.height; y++) {\r\n        /** The some of all the pixels \"under\" the kernel */\r\n        let sum = 0;\r\n\r\n        // Loop over the kernel\r\n        for (let kY = 0; kY < kernel.length; kY++) {\r\n          for (let kX = 0; kX < kernel[kY].length; kX++) {\r\n            /** The value at kernel(kX, kY) */\r\n            const multiplier = kernel[kY][kX];\r\n\r\n            /** The value of the pixel at `ImageData(x + kX, y + kY)` */\r\n            const pixel = CanvasEditor.getPixel(\r\n              imageData,\r\n              x + (kX - (kernel[kY].length - 1) / 2),\r\n              y + (kY - (kernel.length - 1) / 2)\r\n            );\r\n\r\n            // Add the value to the sum\r\n            sum += multiplier * pixel;\r\n          }\r\n        }\r\n\r\n        // Set the pixel at `ImageData(x, y)` the sum\r\n        CanvasEditor.setPixel(newImageData, x, y, sum);\r\n      }\r\n    }\r\n\r\n    // Put the new `ImageData` onto the canvas\r\n    this.putImageData(newImageData);\r\n  }\r\n}\r\n\r\nexport { CanvasEditor };","import { FileDropHandler } from './util/file-drop-handler';\r\nimport { CanvasEditor } from \"./canvas-editor\";\r\n\r\n// Get the cavnas from the document\r\nconst rawCanvasElement = <HTMLCanvasElement>document.getElementById('rawCanvas');\r\nconst previewCanvasElement = <HTMLCanvasElement>document.getElementById('previewCanvas');\r\n\r\n// Get the ConvasContext from the canvas\r\nconst rawCanvas = new CanvasEditor(rawCanvasElement);\r\nconst previewCanvas = new CanvasEditor(previewCanvasElement);\r\n\r\n// Listen for images to be dropped on the \"raw canvas\"\r\nconst fileDropHandler = new FileDropHandler(rawCanvasElement);\r\n\r\n\r\nfileDropHandler.addEventListener('file-ready', async e => {\r\n  // Clear the canvas in case there\r\n  // was an image on it already\r\n  rawCanvas.clear()\r\n\r\n  // Fill the \"raw canvas\" with the new image\r\n  await rawCanvas.fillImage(e.detail);\r\n\r\n  // Apply a kernel to the \"preview canvas\"\r\n  previewCanvas.applyKernel(rawCanvas.getImageData(), [\r\n    [-1, -1, -1],\r\n    [-1, 8, -1],\r\n    [-1, -1, -1]\r\n  ]);\r\n});\r\n\r\n\r\n/*\r\n\r\nExamples of edge detection kernels:\r\n\r\n(Bidirectional)\r\n[-1, -1, -1],\r\n[-1,  8, -1],\r\n[-1, -1, -1]\r\n\r\n(Vertical edges)\r\n[-1,  0,  1],\r\n[-1,  0,  1],\r\n[-1,  0,  1]\r\n\r\n(Horizontal edges)\r\n[-1, -1, -1],\r\n[ 0,  0,  0],\r\n[ 1,  1,  1]\r\n\r\n\r\n\r\n*/"]}